// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// demeanMat
List demeanMat(const Eigen::MatrixXd& Y, const Eigen::MatrixXd& X, const Rcpp::Nullable<Rcpp::NumericMatrix>& Zmat, const Rcpp::StringMatrix& fes, const Eigen::VectorXd& weights, const bool& has_int, const double& eps);
RcppExport SEXP _estimatr_demeanMat(SEXP YSEXP, SEXP XSEXP, SEXP ZmatSEXP, SEXP fesSEXP, SEXP weightsSEXP, SEXP has_intSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type Zmat(ZmatSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringMatrix& >::type fes(fesSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type has_int(has_intSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(demeanMat(Y, X, Zmat, fes, weights, has_int, eps));
    return rcpp_result_gen;
END_RCPP
}
// AtA
Eigen::MatrixXd AtA(const Eigen::MatrixXd& A);
RcppExport SEXP _estimatr_AtA(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(AtA(A));
    return rcpp_result_gen;
END_RCPP
}
// Kr
Eigen::MatrixXd Kr(const Eigen::MatrixXd& A, const Eigen::MatrixXd& B);
RcppExport SEXP _estimatr_Kr(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(Kr(A, B));
    return rcpp_result_gen;
END_RCPP
}
// lm_solver
List lm_solver(const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::MatrixXd>& y, const bool& try_cholesky);
RcppExport SEXP _estimatr_lm_solver(SEXP XSEXP, SEXP ySEXP, SEXP try_choleskySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool& >::type try_cholesky(try_choleskySEXP);
    rcpp_result_gen = Rcpp::wrap(lm_solver(X, y, try_cholesky));
    return rcpp_result_gen;
END_RCPP
}
// lm_variance
List lm_variance(Eigen::Map<Eigen::MatrixXd>& X, const Rcpp::Nullable<Rcpp::NumericMatrix>& Xunweighted, const Eigen::Map<Eigen::MatrixXd>& XtX_inv, const Eigen::Map<Eigen::MatrixXd>& ei, const double weight_mean, const Rcpp::Nullable<Rcpp::IntegerVector>& cluster, const int& J, const bool& ci, const String se_type, const std::vector<bool>& which_covs, const int& fe_rank);
RcppExport SEXP _estimatr_lm_variance(SEXP XSEXP, SEXP XunweightedSEXP, SEXP XtX_invSEXP, SEXP eiSEXP, SEXP weight_meanSEXP, SEXP clusterSEXP, SEXP JSEXP, SEXP ciSEXP, SEXP se_typeSEXP, SEXP which_covsSEXP, SEXP fe_rankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type Xunweighted(XunweightedSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type XtX_inv(XtX_invSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type ei(eiSEXP);
    Rcpp::traits::input_parameter< const double >::type weight_mean(weight_meanSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::IntegerVector>& >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< const String >::type se_type(se_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<bool>& >::type which_covs(which_covsSEXP);
    Rcpp::traits::input_parameter< const int& >::type fe_rank(fe_rankSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_variance(X, Xunweighted, XtX_inv, ei, weight_mean, cluster, J, ci, se_type, which_covs, fe_rank));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_estimatr_demeanMat", (DL_FUNC) &_estimatr_demeanMat, 7},
    {"_estimatr_AtA", (DL_FUNC) &_estimatr_AtA, 1},
    {"_estimatr_Kr", (DL_FUNC) &_estimatr_Kr, 2},
    {"_estimatr_lm_solver", (DL_FUNC) &_estimatr_lm_solver, 3},
    {"_estimatr_lm_variance", (DL_FUNC) &_estimatr_lm_variance, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_estimatr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
